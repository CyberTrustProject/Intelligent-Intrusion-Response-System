from .node import Node


class Exploit(Node):
    __has_succeeded = False
    __attempted = False
    __is_blocked = False

    @property
    def node_type(self):
        return 'exploit'

    @property
    def has_succeeded(self):
        return self.__has_succeeded

    @has_succeeded.setter
    def has_succeeded(self, value):
        assert self.available, 'not all security pre conditions are enabled: {0}, postconditions: {1}\
        '.format({k: v.compromised for k, v in self.preconditions.items()},
                 {k: v.compromised for k, v in self.postconditions.items()})
        self.__has_succeeded = True
        for pc in self.postconditions.values():
            pc.compromise()

    def add_parent(self, node):
        assert node.node_type == 'security_condition' or node.node_type == 'attacker'
        super().add_parent(node)

    def add_child(self, node):
        assert node.node_type == 'security_condition' or node.node_type == 'alert'
        super().add_child(node)

    @property
    def attackers(self):
        return {
            k: v
            for k, v in self.parents.items()
            if v.node_type == 'attacker'
        }

    @property
    def alerts(self) -> dict:
        return {
            k: v
            for k, v in self.children.items()
            if v.node_type == 'alert'
        }

    @property
    def preconditions(self) -> dict:
        return {
            k: v
            for k, v in self.parents.items()
            if v.node_type == 'security_condition'
        }

    @property
    def postconditions(self):
        return {
            k: v
            for k, v in self.children.items()
            if v.node_type == 'security_condition'
        }

    @property
    def available(self):
        if len(self.preconditions) > 0:
            return all(sc.compromised for _, sc in self.preconditions.items()) and self.__is_worth_attempting()
        else:
            return self.__is_worth_attempting()

    def __is_worth_attempting(self):
        return not all(sc.compromised for sc in self.postconditions.values())

    @property
    def blocked(self):
        return self.__is_blocked

    @blocked.setter
    def blocked(self, value):
        assert isinstance(value, bool)
        self.__is_blocked = value

    @property
    def attempted(self):
        return self.__attempted

    @attempted.setter
    def attempted(self, value):
        assert isinstance(value, bool)
        self.__attempted = value

    def reset(self):
        self.__attempted = False
        self.__is_blocked = False

    def set_was_attempted(self, triggered_alerts):
        assert not self.has_succeeded, 'cannot attempt an exploit which has already succeeded'
        assert isinstance(triggered_alerts, list)

        self.attempted = True
        for key in triggered_alerts:
            for child in self.children.values():
                if child.node_type == 'alert':
                    if child.key == key:
                        child.triggered = True

    def clear_was_attempted(self):
        self.attempted = False
