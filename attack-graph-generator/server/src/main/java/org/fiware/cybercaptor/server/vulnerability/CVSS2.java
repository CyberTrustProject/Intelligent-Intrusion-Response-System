package org.fiware.cybercaptor.server.vulnerability;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

// CVSS 3.1
//
// GENERAL INFO ----------------------------------------------------------------------------------------------------
// id, score
//
// BASE SCORE METRICS ----------------------------------------------------------------------------------------------
// ---- EXPLOITABLILITY METRICS ------------------------------------------------------------------------------------
//          Attack Vector -> enum AttackVector2             (SQL: attack_vector)
//      Access Complexity -> enum AttackComplexity2         (SQL: attack_complexity)
//         Authentication -> enum AuthenticationPrivileges2 (SQL: authentication_priviledges)
// ---- IMPACT METRICS ---------------------------------------------------------------------------------------------
// Confidentiality Impact -> enum ImpactValues2             (SQL: confidentiality_impact)
//       Integrity Impact -> enum ImpactValues2             (SQL: integrity_impact)
//    Availability Impact -> enum ImpactValues2             (SQL: availability_impact)
//
// TEMPORAL METRICS ------------------------------------------------------------------------------------------------
//         Exploitability -> enum ExpoitCodeMaturity        (SQL: exploit_code_maturity)
//      Remediation Level -> enum RemediationLevel          (SQL: remediation_level)
//      Report Confidence -> enum ReportConfidence2         (SQL: report_confidence)
//
public class CVSS2 extends CVSS {
    // Inherited from the CVSS class: id, score
    public AttackVector2 attackVector = AttackVector2.UNDEFINED;
    public AttackComplexity2 attackComplexity = AttackComplexity2.UNDEFINED;
    public AuthenticationPrivileges2 authenticationPrivileges = AuthenticationPrivileges2.UNDEFINED;

    public ImpactValues2 confidentialityImpact = ImpactValues2.UNDEFINED;
    public ImpactValues2 integrityImpact = ImpactValues2.UNDEFINED;
    public ImpactValues2 availabilityImpact = ImpactValues2.UNDEFINED;

    public ExploitCodeMaturity exploitCodeMaturity = ExploitCodeMaturity.UNDEFINED;
    public RemediationLevel remediationLevel = RemediationLevel.UNDEFINED;
    public ReportConfidence2 reportConfidence = ReportConfidence2.UNDEFINED;
    // -----------------------------------------------------------------------------------------------------------------

    public AttackVector2 getAttackVector() {
        return attackVector;
    }
    public AttackComplexity2 getAttackComplexity() {
        return attackComplexity;
    }
    public AuthenticationPrivileges2 getAuthenticationPrivileges() {
        return authenticationPrivileges;
    }
    public ImpactValues2 getConfidentialityImpact(){
        return confidentialityImpact;
    }
    public ImpactValues2 getIntegrityImpact(){
        return integrityImpact;
    }
    public ImpactValues2 getAvailabilityImpact(){
        return availabilityImpact;
    }

    public void setAttackVector(AttackVector2 attackVector) {
        this.attackVector = attackVector;
    }
    public void setAttackComplexity(AttackComplexity2 attackComplexity) {
        this.attackComplexity = attackComplexity;
    }
    public void setAuthenticationPriviledges(AuthenticationPrivileges2 authenticationPrivileges) {
        this.authenticationPrivileges = authenticationPrivileges;
    }
    public void setConfidentialityImpact(ImpactValues2 confidentialityImpact) {
        this.confidentialityImpact = confidentialityImpact;
    }
    public void setIntegrityImpact(ImpactValues2 integrityImpact) {
        this.integrityImpact = integrityImpact;
    }
    public void setAvailabilityImpact(ImpactValues2 availabilityImpact) {
        this.availabilityImpact = availabilityImpact;
    }

    // CVSS 2 specific structures.
    public enum AttackVector2 {
        UNDEFINED, NETWORK, ADJACENT, LOCAL;

        @Override
        public String toString() {
            return this.name();
        }

        public static AttackVector2 fromString(String s) {
            if (s.toUpperCase().equals("NETWORK")) {
                return NETWORK;
            }
            else if (s.toUpperCase().equals("ADJACENT")) {
                return ADJACENT;
            }
            else if (s.toUpperCase().equals("LOCAL")) {
                return LOCAL;
            }

            return UNDEFINED;
        }
    }
    public enum AttackComplexity2 {
        UNDEFINED, HIGH, MEDIUM, LOW;

        @Override
        public String toString() {
            return this.name();
        }

        public static AttackComplexity2 fromString(String s) {
            if (s.toUpperCase().equals("HIGH")) {
                return HIGH;
            }
            else if (s.toUpperCase().equals("MEDIUM")) {
                return MEDIUM;
            }
            else if (s.toUpperCase().equals("LOW")) {
                return LOW;
            }

            return UNDEFINED;
        }
    }
    public enum AuthenticationPrivileges2 {
        UNDEFINED, MULTIPLE, SINGLE, NONE;

        @Override
        public String toString() {
            return this.name();
        }

        public static AuthenticationPrivileges2 fromString(String s) {
            if (s.toUpperCase().equals("MULTIPLE")) {
                return MULTIPLE;
            }
            else if (s.toUpperCase().equals("SINGLE")) {
                return SINGLE;
            }
            else if (s.toUpperCase().equals("NONE")) {
                return NONE;
            }

            return UNDEFINED;
        }
    }
    public enum ImpactValues2 {
        UNDEFINED, NONE, PARTIAL, COMPLETE;

        @Override
        public String toString() {
            return this.name();
        }

        public static ImpactValues2 fromString(String s) {
            if (s.toUpperCase().equals("NONE")) {
                return NONE;
            }
            else if (s.toUpperCase().equals("PARTIAL")) {
                return PARTIAL;
            }
            else if (s.toUpperCase().equals("COMPLETE")) {
                return COMPLETE;
            }

            return UNDEFINED;
        }
    }
    public enum ReportConfidence2 {
        UNDEFINED, UNCONFIRMED, UNCORROBORATED, CONFIRMED;

        @Override
        public String toString() {
            return this.name();
        }

        public static ReportConfidence2 fromString(String s) {
            if (s.toUpperCase().equals("UNCONFIRMED")) {
                return UNCONFIRMED;
            }
            else if (s.toUpperCase().equals("UNCORROBORATED")) {
                return UNCORROBORATED;
            }
            else if (s.toUpperCase().equals("CONFIRMED")) {
                return CONFIRMED;
            }

            return UNDEFINED;
        }
    }


   public boolean loadFromDatabase(int id_cvss, Connection conn) throws SQLException {
        if (id_cvss <= 0) {
            return false;
        }
        PreparedStatement pstmt = conn.prepareStatement("SELECT * FROM cvss WHERE id = ?");
        pstmt.setInt(1, id_cvss);
        pstmt.execute();
        ResultSet res = pstmt.getResultSet();
        if (res.next()) {
            //System.out.println("load from database 2");
            setId(res.getInt(1));
            //System.out.println(res.getInt(1));
            setScore(res.getDouble(2));
            //System.out.println(res.getDouble(2));
            setAttackVector(AttackVector2.fromString(res.getString(3)));
            //System.out.println(res.getString(3));
            setAttackComplexity(AttackComplexity2.fromString(res.getString(4)));
            //System.out.println(res.getString(4));
            setAuthenticationPriviledges(AuthenticationPrivileges2.fromString(res.getString(5)));
            //System.out.println(res.getString(5));
            setConfidentialityImpact(ImpactValues2.fromString(res.getString(8)));
            //System.out.println(res.getString(8));
            setIntegrityImpact(ImpactValues2.fromString(res.getString(9)));
            //System.out.println(res.getString(9));
            setAvailabilityImpact(ImpactValues2.fromString(res.getString(10)));
            //System.out.println(res.getString(10));
            //System.out.println("Stop");
            res.close();
            return true;

        } else {
            return false;
        }
    }
}
