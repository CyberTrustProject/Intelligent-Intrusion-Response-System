package org.fiware.cybercaptor.server.vulnerability;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class CVSS {
    // General Fields
    public int id = 0;
    public double score = 0;

    // Temporal metrics ------------------------------------------------------------------------------------------------
    public enum ExploitCodeMaturity {
        UNDEFINED, UNPROVEN, POC, FUNCTIONAL, HIGH;

        @Override
        public String toString() {
            return this.name();
        }

        public static ExploitCodeMaturity fromString(String s) {
            if (s.toUpperCase().equals("UNPROVEN")) {
                return UNPROVEN;
            }
            else if (s.toUpperCase().equals("POC")) {
                return POC;
            }
            else if (s.toUpperCase().equals("FUNCTIONAL")) {
                return FUNCTIONAL;
            }
            else if (s.toUpperCase().equals("HIGH")) {
                return HIGH;
            }

            return UNDEFINED;
        }
    }
    public enum RemediationLevel {
        UNDEFINED, OFFICIAL, TEMPORARY, WORKAROUND, UNAVAILABLE;

        @Override
        public String toString() {
            return this.name();
        }

        public static RemediationLevel fromString(String s) {
            if (s.toUpperCase().equals("OFFICIAL")) {
                return OFFICIAL;
            }
            else if (s.toUpperCase().equals("TEMPORARY")) {
                return TEMPORARY;
            }
            else if (s.toUpperCase().equals("WORKAROUND")) {
                return WORKAROUND;
            }
            else if (s.toUpperCase().equals("UNAVAILABLE")) {
                return UNAVAILABLE;
            }

            return UNDEFINED;
        }
    }

    /**
     * Gets id.
     *
     * @return the id
     */
    public int getId() {
        return id;
    }

    /**
     * Sets id.
     *
     * @param id the id
     */
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Gets score.
     *
     * @return the score
     */
    public double getScore() {
        return score;
    }

    /**
     * Sets score.
     *
     * @param score the score
     */
    public void setScore(double score) {
        this.score = score;
    }

}
/*
    public boolean loadFromDatabase(int id_cvss, Connection conn) throws SQLException {
        if (id_cvss <= 0) {
            return false;
        }
        PreparedStatement pstmt = conn.prepareStatement("SELECT * FROM cvss WHERE id = ?");
        pstmt.setInt(1, id_cvss);
        pstmt.execute();
        ResultSet res = pstmt.getResultSet();
        if (res.next()) {
            setId(res.getInt(1));
            setScore(res.getDouble(2));
            setAccessVector(AccessVectorValues.fromString(res.getString(3)));
            setAccessComplexity(AccessComplexityValues.fromString(res.getString(4)));
            setAuthentication(AuthenticationValues.fromString(res.getString(5)));
            setConfidentialityImpact(ImpactValues.fromString(res.getString(6)));
            setIntegrityImpact(ImpactValues.fromString(res.getString(7)));
            setAvailabilityImpact(ImpactValues.fromString(res.getString(8)));
            res.close();
            return true;

        } else {
            return false;
        }
    }
*/
