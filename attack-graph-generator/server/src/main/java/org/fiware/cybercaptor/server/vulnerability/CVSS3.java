package org.fiware.cybercaptor.server.vulnerability;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
// CVSS 3.1
//
// GENERAL INFO ----------------------------------------------------------------------------------------------------
// id, score
//
// BASE SCORE METRICS ----------------------------------------------------------------------------------------------
// ---- EXPLOITABLILITY METRICS ------------------------------------------------------------------------------------
//          Attack Vector -> enum AttackVector3             (SQL: attack_vector)
//      Attack Complexity -> enum AttackComplexity3         (SQL: attack_complexity)
//    Privileges Required -> enum AuthenticationPrivileges3 (SQL: authentication_priviledges)
//       User Interaction -> enum UserInteraction3          (SQL: user_interaction)
//                  Scope -> enum Scope3                    (SQL: scope)
// ---- IMPACT METRICS ---------------------------------------------------------------------------------------------
// Confidentiality Impact -> enum ImpactValues3             (SQL: confidentiality_impact)
//       Integrity Impact -> enum ImpactValues3             (SQL: integrity_impact)
//    Availability Impact -> enum ImpactValues3             (SQL: availability_impact)
//
// TEMPORAL METRICS ------------------------------------------------------------------------------------------------
//         Exploitability -> enum ExploitCodeMaturity       (SQL: exploit_code_maturity)
//      Remediation Level -> enum RemediationLevel          (SQL: remediation_level)
//      Report Confidence -> enum ReportConfidence3         (SQL: report_confidence)
//
public class CVSS3 extends CVSS {
    // Inherited from the CVSS class: id, score
    public AttackVector3 attackVector = AttackVector3.UNDEFINED;
    public AttackComplexity3 attackComplexity = AttackComplexity3.UNDEFINED;
    public AuthenticationPrivileges3 authenticationPrivileges = AuthenticationPrivileges3.UNDEFINED;
    public UserInteraction3 userInteraction = UserInteraction3.UNDEFINED;
    public Scope3 scope = Scope3.UNDEFINED;

    public ImpactValues3 confidentialityImpact = ImpactValues3.UNDEFINED;
    public ImpactValues3 integrityImpact = ImpactValues3.UNDEFINED;
    public ImpactValues3 availabilityImpact = ImpactValues3.UNDEFINED;

    public ExploitCodeMaturity exploitCodeMaturity = ExploitCodeMaturity.UNDEFINED;
    public RemediationLevel remediationLevel = RemediationLevel.UNDEFINED;
    public ReportConfidence3 reportConfidence = ReportConfidence3.UNDEFINED;

    // -----------------------------------------------------------------------------------------------------------------

    public AttackVector3 getAttackVector() {
        return attackVector;
    }
    public AttackComplexity3 getAttackComplexity() {
        return attackComplexity;
    }
    public AuthenticationPrivileges3 getAuthenticationPrivileges() {
        return authenticationPrivileges;
    }
    public ImpactValues3 getConfidentialityImpact(){
        return confidentialityImpact;
    }
    public ImpactValues3 getIntegrityImpact(){
        return integrityImpact;
    }
    public ImpactValues3 getAvailabilityImpact(){
        return availabilityImpact;
    }
    public UserInteraction3 getUserInteraction(){
        return userInteraction;
    }
    public Scope3 getScope(){
        return scope;
    }



    public void setAttackVector(AttackVector3 attackVector) {
        this.attackVector = attackVector;
    }
    public void setAttackComplexity(AttackComplexity3 attackComplexity) {
        this.attackComplexity = attackComplexity;
    }
    public void setAuthenticationPriviledges(AuthenticationPrivileges3 authenticationPrivileges) {
        this.authenticationPrivileges = authenticationPrivileges;
    }
    public void setConfidentialityImpact(ImpactValues3 confidentialityImpact) {
        this.confidentialityImpact = confidentialityImpact;
    }
    public void setIntegrityImpact(ImpactValues3 integrityImpact) {
        this.integrityImpact = integrityImpact;
    }
    public void setAvailabilityImpact(ImpactValues3 availabilityImpact) {
        this.availabilityImpact = availabilityImpact;
    }
    public void setUserInteraction(UserInteraction3 userInteraction){
        this.userInteraction = userInteraction;
    }
    public void setScope(Scope3 scope){
        this.scope= scope;
    }



    // CVSS 3.1 specific structures.
    public enum AttackVector3 {
        UNDEFINED, NETWORK, ADJACENT, LOCAL, PHYSICAL;

        @Override
        public String toString() {
            return this.name();
        }

        public static AttackVector3 fromString(String s) {
            if (s.toUpperCase().equals("NETWORK")) {
                return NETWORK;
            }
            else if (s.toUpperCase().equals("ADJACENT")) {
                return ADJACENT;
            }
            else if (s.toUpperCase().equals("LOCAL")) {
                return LOCAL;
            }
            else if (s.toUpperCase().equals("PHYSICAL")) {
                return PHYSICAL;
            }

            return UNDEFINED;
        }
    }
    public enum AttackComplexity3 {
        UNDEFINED, HIGH, LOW;

        @Override
        public String toString() {
            return this.name();
        }

        public static AttackComplexity3 fromString(String s) {
            if (s.toUpperCase().equals("HIGH")) {
                return HIGH;
            }
            else if (s.toUpperCase().equals("LOW")) {
                return LOW;
            }

            return UNDEFINED;
        }
    }
    public enum AuthenticationPrivileges3 {
        UNDEFINED, NONE, LOW, HIGH;

        @Override
        public String toString() {
            return this.name();
        }

        public static AuthenticationPrivileges3 fromString(String s) {
            if (s.toUpperCase().equals("NONE")) {
                return NONE;
            }
            else if (s.toUpperCase().equals("LOW")) {
                return LOW;
            }
            else if (s.toUpperCase().equals("HIGH")) {
                return HIGH;
            }

            return UNDEFINED;
        }
    }
    public enum UserInteraction3 {
        UNDEFINED, NONE, REQUIRED;

        @Override
        public String toString() {
            return this.name();
        }

        public static UserInteraction3 fromString(String s) {
            if (s.toUpperCase().equals("NONE")) {
                return NONE;
            }
            else if (s.toUpperCase().equals("REQUIRED")) {
                return REQUIRED;
            }

            return UNDEFINED;
        }
    }
    public enum Scope3 {
        UNDEFINED, UNCHANGED, CHANGED;

        @Override
        public String toString() {
            return this.name();
        }

        public static Scope3 fromString(String s) {
            if (s.toUpperCase().equals("UNCHANGED")) {
                return UNCHANGED;
            }
            else if (s.toUpperCase().equals("CHANGED")) {
                return CHANGED;
            }

            return UNDEFINED;
        }
    }
    public enum ImpactValues3 {
        UNDEFINED, NONE, LOW, HIGH;

        @Override
        public String toString() {
            return this.name();
        }

        public static ImpactValues3 fromString(String s) {
            if (s.toUpperCase().equals("NONE")) {
                return NONE;
            }
            else if (s.toUpperCase().equals("LOW")) {
                return LOW;
            }
            else if (s.toUpperCase().equals("HIGH")) {
                return HIGH;
            }

            return UNDEFINED;
        }
    }
    public enum ReportConfidence3 {
        UNDEFINED, UNKNOWN, REASONABLE, CONFIRMED;

        @Override
        public String toString() {
            return this.name();
        }

        public static ReportConfidence3 fromString(String s) {
            if (s.toUpperCase().equals("UNKNOWN")) {
                return UNKNOWN;
            }
            else if (s.toUpperCase().equals("REASONABLE")) {
                return REASONABLE;
            }
            else if (s.toUpperCase().equals("CONFIRMED")) {
                return CONFIRMED;
            }

            return UNDEFINED;
        }
    }

   
        

    public boolean loadFromDatabase(int id_cvss, Connection conn) throws SQLException {
        if (id_cvss <= 0) {
            return false;
        }
        PreparedStatement pstmt = conn.prepareStatement("SELECT * FROM cvss WHERE id = ?");
        pstmt.setInt(1, id_cvss);
        pstmt.execute();
        ResultSet res = pstmt.getResultSet();
        if (res.next()) {
            //System.out.println("load from database 3");
            setId(res.getInt(1)); // POTENTIAL BREAK POINT
            //System.out.println(res.getInt(1));
            setScore(res.getDouble(2));
            //System.out.println(res.getDouble(2));
            setAttackVector(AttackVector3.fromString(res.getString(3)));
            //System.out.println(res.getString(3));
            setAttackComplexity(AttackComplexity3.fromString(res.getString(4)));
            //System.out.println(res.getString(4));
            setAuthenticationPriviledges(AuthenticationPrivileges3.fromString(res.getString(5)));
            //System.out.println(res.getString(5));
            setUserInteraction(UserInteraction3.fromString(res.getString(6)));
            //System.out.println(res.getString(6));
            setScope(Scope3.fromString(res.getString(7)));
            //System.out.println(res.getString(7));
            setConfidentialityImpact(ImpactValues3.fromString(res.getString(8)));
            //System.out.println(res.getString(8));
            setIntegrityImpact(ImpactValues3.fromString(res.getString(9)));
            //System.out.println(res.getString(9));
            setAvailabilityImpact(ImpactValues3.fromString(res.getString(10)));
            //System.out.println(res.getString(10));
            //System.out.println("Stop");
            res.close();
            return true;

        } else {
            return false;
        }
    }
}


